%{

roi_sums_all;
n_rois;
%n_rois = size(roi_sums_all, 2); %634

nconds; % 8 directions
frames_per_condition = 31;	  % t_pre_frames+t_stim_frames+t_post_frames
angles = {stim_struct.condnames};

roi_centers;
roi_borders;


run cell_mapping_verified.m
%omni_id_from_roi = NaN(n_rois, 1);
cell_dict;

%}

%%{
roi_sums_all = roi_sums_all_original;

%% detrending:
	%roi_sums_all = roi_sums_all+10;
for id = 1:size(roi_sums_all, 2)
	%smoothed = imgaussfilt(roi_sums_all(:,id), 20/0.128, 'Padding', 'symmetric');
	%roi_sums_all(:,id) = roi_sums_all(:,id) - smoothed./ ;
	%[min(roi_sums_all(:,id)) max(roi_sums_all(:,id))]
	% detrending: subtract baseline (generated by gaussian filtering)
	roi_sums_all(:,id) = roi_sums_all(:,id) - imgaussfilt(roi_sums_all(:,id), 20/0.128, 'Padding', 'symmetric');
end
	%roi_sums_all = roi_sums_all*100-100;
%}
roi_sums_all_reshape = reshape(roi_sums_all, 31, 8, 5, n_rois);
roi_sums_all_reshape = roi_sums_all_reshape(:, :, 2:5, :);  % disgard first trial
%% Shift analysis and rescaling correction for analysis artifacts
%{
shift = 5;
if 0  % rescale
rescaled = roi_sums_all + 100;
assert(all(rescaled(:)>0))
begin = (8+shift) * 31;
finale = (3*8+8+shift) * 31;
span = 10-1;
scaling = mean(rescaled([finale-span:finale],:)) ./ mean(rescaled([begin-span:begin],:));
scaling =  1 + repmat(([1:31*8*5] - begin).', 1, n_rois) .* repmat((scaling-1) / (finale-begin), 31*8*5, 1);
rescaled = rescaled ./ scaling - 100;
else
	rescaled = roi_sums_all;
end
roi_sums_all_reshape = reshape(circshift(rescaled, 31*shift, 1), 31, 8, 5, n_rois);
%mean(mean(roi_sums_all_reshape(end, 8, 3:5, :) - roi_sums_all_reshape(end, 8, 2:4, :)))
roi_sums_all_reshape = roi_sums_all_reshape(:, :, 3:5, :);  % disgard first trial
roi_sums_all_reshape = roi_sums_all_reshape(:, circshift(1:8, [0 -shift]), :, :);
%}

roi_sums_means = squeeze(mean(roi_sums_all_reshape, 3));	% 31*8*n_rois
roi_sums_means_flatten = reshape(roi_sums_means, 31*8, n_rois);

roi_sums_xcondmeans = squeeze(mean(roi_sums_means, 2));	% 31*n_rois

xcellmeans4 = mean(reshape(roi_sums_means, 31*8,[]),2);
xcellmeans = mean(reshape(roi_sums_all, 31*8,[]),2);
ymean = mean(reshape(roi_sums_all, 31, []), 2);

% figure;plot()
% hold on; plot(ymean)


onoff = find_max_min_diffs(roi_sums_means);
maxdiffs = find_diff_peaks2(roi_sums_means);
maxdiffs_trial = NaN(size(maxdiffs));
for a = 1:8
	maxdiffs_trial(:, a, :) = maxdiffs(:, a, :) + 31*(a-1);
end
maxdiffs_trial = reshape(maxdiffs_trial, 2*8, n_rois);

%% cell_info dependant:
%%{
gc_types = cell_info_typedef_gc();
gc_types = {gc_types.name};
%gc_types = list_types(cell_info);
%roi_sums_xcond_typemeans = table();

roi_sums_xcond_typemeans = table();
for celltype = gc_types(:).'
	roi_sums_xcond_typemeans{celltype, :} = mean(roi_sums_xcondmeans(:, get_ca_ids(cell_dict_j, cell_info, celltype, false)), 2).';
end

for celltype = {'weirdos'    'cutoffs'} % {'orphans'    'weirdos'    'cutoffs'}
roi_sums_xcond_typemeans(celltype, :) = [];
end


roi_sums_xcond_responsive_typemeans = ...
	compute_type_means(cell_dict_j, cell_info, roi_sums_all_reshape, roi_sums_xcondmeans, false, 'qi', 0.5);
roi_sums_xcond_renormalized_typemeans = ...
	compute_type_means(cell_dict_j, cell_info, roi_sums_all_reshape, roi_sums_xcondmeans, true, 'qi', 0.5);


%}
